import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../ngb-config";
/**
 * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all modals used in the application.
 *
 * @since 3.1.0
 */
class NgbModalConfig {
    constructor(_ngbConfig) {
        this._ngbConfig = _ngbConfig;
        this.backdrop = true;
        this.fullscreen = false;
        this.keyboard = true;
    }
    get animation() {
        return this._animation === undefined ? this._ngbConfig.animation : this._animation;
    }
    set animation(animation) {
        this._animation = animation;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: NgbModalConfig, deps: [{ token: i1.NgbConfig }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: NgbModalConfig, providedIn: 'root' }); }
}
export { NgbModalConfig };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: NgbModalConfig, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.NgbConfig }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZGFsL21vZGFsLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDOzs7QUE0SXJEOzs7Ozs7O0dBT0c7QUFDSCxNQUNhLGNBQWM7SUFrQjFCLFlBQW9CLFVBQXFCO1FBQXJCLGVBQVUsR0FBVixVQUFVLENBQVc7UUFmekMsYUFBUSxHQUF1QixJQUFJLENBQUM7UUFJcEMsZUFBVSxHQUF5RCxLQUFLLENBQUM7UUFFekUsYUFBUSxHQUFHLElBQUksQ0FBQztJQVM0QixDQUFDO0lBRTdDLElBQUksU0FBUztRQUNaLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3BGLENBQUM7SUFDRCxJQUFJLFNBQVMsQ0FBQyxTQUFrQjtRQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztJQUM3QixDQUFDOzhHQXpCVyxjQUFjO2tIQUFkLGNBQWMsY0FERCxNQUFNOztTQUNuQixjQUFjOzJGQUFkLGNBQWM7a0JBRDFCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nYkNvbmZpZyB9IGZyb20gJy4uL25nYi1jb25maWcnO1xuXG4vKipcbiAqIE9wdGlvbnMgYXZhaWxhYmxlIHdoZW4gb3BlbmluZyBuZXcgbW9kYWwgd2luZG93cyB3aXRoIGBOZ2JNb2RhbC5vcGVuKClgIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOZ2JNb2RhbE9wdGlvbnMge1xuXHQvKipcblx0ICogSWYgYHRydWVgLCBtb2RhbCBvcGVuaW5nIGFuZCBjbG9zaW5nIHdpbGwgYmUgYW5pbWF0ZWQuXG5cdCAqXG5cdCAqIEBzaW5jZSA4LjAuMFxuXHQgKi9cblx0YW5pbWF0aW9uPzogYm9vbGVhbjtcblxuXHQvKipcblx0ICogYGFyaWEtbGFiZWxsZWRieWAgYXR0cmlidXRlIHZhbHVlIHRvIHNldCBvbiB0aGUgbW9kYWwgd2luZG93LlxuXHQgKlxuXHQgKiBAc2luY2UgMi4yLjBcblx0ICovXG5cdGFyaWFMYWJlbGxlZEJ5Pzogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBgYXJpYS1kZXNjcmliZWRieWAgYXR0cmlidXRlIHZhbHVlIHRvIHNldCBvbiB0aGUgbW9kYWwgd2luZG93LlxuXHQgKlxuXHQgKiBAc2luY2UgNi4xLjBcblx0ICovXG5cdGFyaWFEZXNjcmliZWRCeT86IHN0cmluZztcblxuXHQvKipcblx0ICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgZWxlbWVudCB3aWxsIGJlIGNyZWF0ZWQgZm9yIGEgZ2l2ZW4gbW9kYWwuXG5cdCAqXG5cdCAqIEFsdGVybmF0aXZlbHksIHNwZWNpZnkgYCdzdGF0aWMnYCBmb3IgYSBiYWNrZHJvcCB3aGljaCBkb2Vzbid0IGNsb3NlIHRoZSBtb2RhbCBvbiBjbGljay5cblx0ICpcblx0ICogRGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXG5cdCAqL1xuXHRiYWNrZHJvcD86IGJvb2xlYW4gfCAnc3RhdGljJztcblxuXHQvKipcblx0ICogQ2FsbGJhY2sgcmlnaHQgYmVmb3JlIHRoZSBtb2RhbCB3aWxsIGJlIGRpc21pc3NlZC5cblx0ICpcblx0ICogSWYgdGhpcyBmdW5jdGlvbiByZXR1cm5zOlxuXHQgKiAqIGBmYWxzZWBcblx0ICogKiBhIHByb21pc2UgcmVzb2x2ZWQgd2l0aCBgZmFsc2VgXG5cdCAqICogYSBwcm9taXNlIHRoYXQgaXMgcmVqZWN0ZWRcblx0ICpcblx0ICogdGhlbiB0aGUgbW9kYWwgd29uJ3QgYmUgZGlzbWlzc2VkLlxuXHQgKi9cblx0YmVmb3JlRGlzbWlzcz86ICgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuXG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIGJlIGNlbnRlcmVkIHZlcnRpY2FsbHkuXG5cdCAqXG5cdCAqIERlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cblx0ICpcblx0ICogQHNpbmNlIDEuMS4wXG5cdCAqL1xuXHRjZW50ZXJlZD86IGJvb2xlYW47XG5cblx0LyoqXG5cdCAqIEEgc2VsZWN0b3Igc3BlY2lmeWluZyB0aGUgZWxlbWVudCBhbGwgbmV3IG1vZGFsIHdpbmRvd3Mgc2hvdWxkIGJlIGFwcGVuZGVkIHRvLlxuXHQgKiBTaW5jZSB2NS4zLjAgaXQgaXMgYWxzbyBwb3NzaWJsZSB0byBwYXNzIHRoZSByZWZlcmVuY2UgdG8gYW4gYEhUTUxFbGVtZW50YC5cblx0ICpcblx0ICogSWYgbm90IHNwZWNpZmllZCwgd2lsbCBiZSBgYm9keWAuXG5cdCAqL1xuXHRjb250YWluZXI/OiBzdHJpbmcgfCBIVE1MRWxlbWVudDtcblxuXHQvKipcblx0ICogSWYgYHRydWVgIG1vZGFsIHdpbGwgYWx3YXlzIGJlIGRpc3BsYXllZCBpbiBmdWxsc2NyZWVuIG1vZGUuXG5cdCAqXG5cdCAqIEZvciB2YWx1ZXMgbGlrZSBgJ21kJ2AgaXQgbWVhbnMgdGhhdCBtb2RhbCB3aWxsIGJlIGRpc3BsYXllZCBpbiBmdWxsc2NyZWVuIG1vZGVcblx0ICogb25seSBpZiB0aGUgdmlld3BvcnQgd2lkdGggaXMgYmVsb3cgYCdtZCdgLiBGb3IgY3VzdG9tIHN0cmluZ3MgKGV4LiB3aGVuIHBhc3NpbmcgYCdteXNpemUnYClcblx0ICogaXQgd2lsbCBhZGQgYSBgJ21vZGFsLWZ1bGxzY3JlZW4tbXlzaXplLWRvd24nYCBjbGFzcy5cblx0ICpcblx0ICogSWYgbm90IHNwZWNpZmllZCB3aWxsIGJlIGBmYWxzZWAuXG5cdCAqXG5cdCAqIEBzaW5jZSAxMi4xLjBcblx0ICovXG5cdGZ1bGxzY3JlZW4/OiAnc20nIHwgJ21kJyB8ICdsZycgfCAneGwnIHwgJ3h4bCcgfCBib29sZWFuIHwgc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgYEluamVjdG9yYCB0byB1c2UgZm9yIG1vZGFsIGNvbnRlbnQuXG5cdCAqL1xuXHRpbmplY3Rvcj86IEluamVjdG9yO1xuXG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIGJlIGNsb3NlZCB3aGVuIGBFc2NhcGVgIGtleSBpcyBwcmVzc2VkXG5cdCAqXG5cdCAqIERlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuXHQgKi9cblx0a2V5Ym9hcmQ/OiBib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBTY3JvbGxhYmxlIG1vZGFsIGNvbnRlbnQgKGZhbHNlIGJ5IGRlZmF1bHQpLlxuXHQgKlxuXHQgKiBAc2luY2UgNS4wLjBcblx0ICovXG5cdHNjcm9sbGFibGU/OiBib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBTaXplIG9mIGEgbmV3IG1vZGFsIHdpbmRvdy5cblx0ICovXG5cdHNpemU/OiAnc20nIHwgJ2xnJyB8ICd4bCcgfCBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIEEgY3VzdG9tIGNsYXNzIHRvIGFwcGVuZCB0byB0aGUgbW9kYWwgd2luZG93LlxuXHQgKi9cblx0d2luZG93Q2xhc3M/OiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIEEgY3VzdG9tIGNsYXNzIHRvIGFwcGVuZCB0byB0aGUgbW9kYWwgZGlhbG9nLlxuXHQgKlxuXHQgKiBAc2luY2UgOS4xLjBcblx0ICovXG5cdG1vZGFsRGlhbG9nQ2xhc3M/OiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIEEgY3VzdG9tIGNsYXNzIHRvIGFwcGVuZCB0byB0aGUgbW9kYWwgYmFja2Ryb3AuXG5cdCAqXG5cdCAqIEBzaW5jZSAxLjEuMFxuXHQgKi9cblx0YmFja2Ryb3BDbGFzcz86IHN0cmluZztcbn1cblxuLyoqXG4gKiBPcHRpb25zIHRoYXQgY2FuIGJlIGNoYW5nZWQgb24gYW4gb3BlbmVkIG1vZGFsIHdpdGggYE5nYk1vZGFsUmVmLnVwZGF0ZSgpYCBhbmQgYE5nYkFjdGl2ZU1vZGFsLnVwZGF0ZSgpYCBtZXRob2RzLlxuICpcbiAqIEBzaW5jZSAxNC4yLjBcbiAqL1xuZXhwb3J0IHR5cGUgTmdiTW9kYWxVcGRhdGFibGVPcHRpb25zID0gUGljazxcblx0TmdiTW9kYWxPcHRpb25zLFxuXHR8ICdhcmlhTGFiZWxsZWRCeSdcblx0fCAnYXJpYURlc2NyaWJlZEJ5J1xuXHR8ICdjZW50ZXJlZCdcblx0fCAnZnVsbHNjcmVlbidcblx0fCAnYmFja2Ryb3BDbGFzcydcblx0fCAnc2l6ZSdcblx0fCAnd2luZG93Q2xhc3MnXG5cdHwgJ21vZGFsRGlhbG9nQ2xhc3MnXG4+O1xuXG4vKipcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW2BOZ2JNb2RhbGBdKCMvY29tcG9uZW50cy9tb2RhbC9hcGkjTmdiTW9kYWwpIHNlcnZpY2UuXG4gKlxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXG4gKiBvcmRlciB0byBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwgbW9kYWxzIHVzZWQgaW4gdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBzaW5jZSAzLjEuMFxuICovXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE5nYk1vZGFsQ29uZmlnIGltcGxlbWVudHMgUmVxdWlyZWQ8TmdiTW9kYWxPcHRpb25zPiB7XG5cdGFyaWFMYWJlbGxlZEJ5OiBzdHJpbmc7XG5cdGFyaWFEZXNjcmliZWRCeTogc3RyaW5nO1xuXHRiYWNrZHJvcDogYm9vbGVhbiB8ICdzdGF0aWMnID0gdHJ1ZTtcblx0YmVmb3JlRGlzbWlzczogKCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG5cdGNlbnRlcmVkOiBib29sZWFuO1xuXHRjb250YWluZXI6IHN0cmluZyB8IEhUTUxFbGVtZW50O1xuXHRmdWxsc2NyZWVuOiAnc20nIHwgJ21kJyB8ICdsZycgfCAneGwnIHwgJ3h4bCcgfCBib29sZWFuIHwgc3RyaW5nID0gZmFsc2U7XG5cdGluamVjdG9yOiBJbmplY3Rvcjtcblx0a2V5Ym9hcmQgPSB0cnVlO1xuXHRzY3JvbGxhYmxlOiBib29sZWFuO1xuXHRzaXplOiAnc20nIHwgJ2xnJyB8ICd4bCcgfCBzdHJpbmc7XG5cdHdpbmRvd0NsYXNzOiBzdHJpbmc7XG5cdG1vZGFsRGlhbG9nQ2xhc3M6IHN0cmluZztcblx0YmFja2Ryb3BDbGFzczogc3RyaW5nO1xuXG5cdHByaXZhdGUgX2FuaW1hdGlvbjogYm9vbGVhbjtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIF9uZ2JDb25maWc6IE5nYkNvbmZpZykge31cblxuXHRnZXQgYW5pbWF0aW9uKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLl9hbmltYXRpb24gPT09IHVuZGVmaW5lZCA/IHRoaXMuX25nYkNvbmZpZy5hbmltYXRpb24gOiB0aGlzLl9hbmltYXRpb247XG5cdH1cblx0c2V0IGFuaW1hdGlvbihhbmltYXRpb246IGJvb2xlYW4pIHtcblx0XHR0aGlzLl9hbmltYXRpb24gPSBhbmltYXRpb247XG5cdH1cbn1cbiJdfQ==