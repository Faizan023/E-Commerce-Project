import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../ngb-config";
/**
 * A configuration service for the [`NgbOffcanvas`](#/components/offcanvas/api#NgbOffcanvas) service.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all offcanvases used in the application.
 *
 * @since 12.1.0
 */
class NgbOffcanvasConfig {
    constructor(_ngbConfig) {
        this._ngbConfig = _ngbConfig;
        this.backdrop = true;
        this.keyboard = true;
        this.position = 'start';
        this.scroll = false;
    }
    get animation() {
        return this._animation === undefined ? this._ngbConfig.animation : this._animation;
    }
    set animation(animation) {
        this._animation = animation;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: NgbOffcanvasConfig, deps: [{ token: i1.NgbConfig }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: NgbOffcanvasConfig, providedIn: 'root' }); }
}
export { NgbOffcanvasConfig };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: NgbOffcanvasConfig, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.NgbConfig }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2ZmY2FudmFzLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vZmZjYW52YXMvb2ZmY2FudmFzLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDOzs7QUFvRnJEOzs7Ozs7O0dBT0c7QUFDSCxNQUNhLGtCQUFrQjtJQWU5QixZQUFvQixVQUFxQjtRQUFyQixlQUFVLEdBQVYsVUFBVSxDQUFXO1FBWnpDLGFBQVEsR0FBdUIsSUFBSSxDQUFDO1FBS3BDLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFFaEIsYUFBUSxHQUF1QyxPQUFPLENBQUM7UUFDdkQsV0FBTSxHQUFHLEtBQUssQ0FBQztJQUk2QixDQUFDO0lBRTdDLElBQUksU0FBUztRQUNaLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3BGLENBQUM7SUFDRCxJQUFJLFNBQVMsQ0FBQyxTQUFrQjtRQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztJQUM3QixDQUFDOzhHQXRCVyxrQkFBa0I7a0hBQWxCLGtCQUFrQixjQURMLE1BQU07O1NBQ25CLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUQ5QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2JDb25maWcgfSBmcm9tICcuLi9uZ2ItY29uZmlnJztcblxuLyoqXG4gKiBPcHRpb25zIGF2YWlsYWJsZSB3aGVuIG9wZW5pbmcgbmV3IG9mZmNhbnZhcyB3aW5kb3dzIHdpdGggYE5nYk9mZmNhbnZhcy5vcGVuKClgIG1ldGhvZC5cbiAqXG4gKiBAc2luY2UgMTIuMS4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmdiT2ZmY2FudmFzT3B0aW9ucyB7XG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIG9wZW5pbmcgYW5kIGNsb3Npbmcgd2lsbCBiZSBhbmltYXRlZC5cblx0ICovXG5cdGFuaW1hdGlvbj86IGJvb2xlYW47XG5cblx0LyoqXG5cdCAqIGBhcmlhLWRlc2NyaWJlZGJ5YCBhdHRyaWJ1dGUgdmFsdWUgdG8gc2V0IG9uIHRoZSBvZmZjYW52YXMgcGFuZWwuXG5cdCAqL1xuXHRhcmlhRGVzY3JpYmVkQnk/OiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIGBhcmlhLWxhYmVsbGVkYnlgIGF0dHJpYnV0ZSB2YWx1ZSB0byBzZXQgb24gdGhlIG9mZmNhbnZhcyBwYW5lbC5cblx0ICovXG5cdGFyaWFMYWJlbGxlZEJ5Pzogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBlbGVtZW50IHdpbGwgYmUgY3JlYXRlZCBmb3IgYSBnaXZlbiBvZmZjYW52YXMuXG5cdCAqIElmICdzdGF0aWMnLCBjbGlja2luZyB0aGUgYmFja2Ryb3Agd29uJ3QgY2xvc2UgdGhlIG9mZmNhbnZhcyAoYXZhaWxhYmxlIHNpbmNlIDEzLjEuMCkuXG5cdCAqXG5cdCAqIERlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuXHQgKi9cblx0YmFja2Ryb3A/OiBib29sZWFuIHwgJ3N0YXRpYyc7XG5cblx0LyoqXG5cdCAqIEEgY3VzdG9tIGNsYXNzIHRvIGFwcGVuZCB0byB0aGUgb2ZmY2FudmFzIGJhY2tkcm9wLlxuXHQgKi9cblx0YmFja2Ryb3BDbGFzcz86IHN0cmluZztcblxuXHQvKipcblx0ICogQ2FsbGJhY2sgcmlnaHQgYmVmb3JlIHRoZSBvZmZjYW52YXMgd2lsbCBiZSBkaXNtaXNzZWQuXG5cdCAqXG5cdCAqIElmIHRoaXMgZnVuY3Rpb24gcmV0dXJuczpcblx0ICogKiBgZmFsc2VgXG5cdCAqICogYSBwcm9taXNlIHJlc29sdmVkIHdpdGggYGZhbHNlYFxuXHQgKiAqIGEgcHJvbWlzZSB0aGF0IGlzIHJlamVjdGVkXG5cdCAqXG5cdCAqIHRoZW4gdGhlIG9mZmNhbnZhcyB3b24ndCBiZSBkaXNtaXNzZWQuXG5cdCAqL1xuXHRiZWZvcmVEaXNtaXNzPzogKCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG5cblx0LyoqXG5cdCAqIEEgc2VsZWN0b3Igc3BlY2lmeWluZyB0aGUgZWxlbWVudCBhbGwgbmV3IG9mZmNhbnZhcyBwYW5lbHMgYW5kIGJhY2tkcm9wcyBzaG91bGQgYmUgYXBwZW5kZWQgdG8uXG5cdCAqXG5cdCAqIElmIG5vdCBzcGVjaWZpZWQsIHdpbGwgYmUgYGJvZHlgLlxuXHQgKi9cblx0Y29udGFpbmVyPzogc3RyaW5nIHwgSFRNTEVsZW1lbnQ7XG5cblx0LyoqXG5cdCAqIFRoZSBgSW5qZWN0b3JgIHRvIHVzZSBmb3Igb2ZmY2FudmFzIGNvbnRlbnQuXG5cdCAqL1xuXHRpbmplY3Rvcj86IEluamVjdG9yO1xuXG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIHRoZSBvZmZjYW52YXMgd2lsbCBiZSBjbG9zZWQgd2hlbiBgRXNjYXBlYCBrZXkgaXMgcHJlc3NlZFxuXHQgKlxuXHQgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cblx0ICovXG5cdGtleWJvYXJkPzogYm9vbGVhbjtcblxuXHQvKipcblx0ICogQSBjdXN0b20gY2xhc3MgdG8gYXBwZW5kIHRvIHRoZSBvZmZjYW52YXMgcGFuZWwuXG5cdCAqL1xuXHRwYW5lbENsYXNzPzogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgcG9zaXRpb24gb2YgdGhlIG9mZmNhbnZhc1xuXHQgKi9cblx0cG9zaXRpb24/OiAnc3RhcnQnIHwgJ2VuZCcgfCAndG9wJyB8ICdib3R0b20nO1xuXG5cdC8qKlxuXHQgKiBTY3JvbGwgY29udGVudCB3aGlsZSBvZmZjYW52YXMgaXMgb3BlbiAoZmFsc2UgYnkgZGVmYXVsdCkuXG5cdCAqL1xuXHRzY3JvbGw/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW2BOZ2JPZmZjYW52YXNgXSgjL2NvbXBvbmVudHMvb2ZmY2FudmFzL2FwaSNOZ2JPZmZjYW52YXMpIHNlcnZpY2UuXG4gKlxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXG4gKiBvcmRlciB0byBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwgb2ZmY2FudmFzZXMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogQHNpbmNlIDEyLjEuMFxuICovXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE5nYk9mZmNhbnZhc0NvbmZpZyBpbXBsZW1lbnRzIFJlcXVpcmVkPE5nYk9mZmNhbnZhc09wdGlvbnM+IHtcblx0YXJpYURlc2NyaWJlZEJ5OiBzdHJpbmc7XG5cdGFyaWFMYWJlbGxlZEJ5OiBzdHJpbmc7XG5cdGJhY2tkcm9wOiBib29sZWFuIHwgJ3N0YXRpYycgPSB0cnVlO1xuXHRiYWNrZHJvcENsYXNzOiBzdHJpbmc7XG5cdGJlZm9yZURpc21pc3M6ICgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuXHRjb250YWluZXI6IHN0cmluZyB8IEhUTUxFbGVtZW50O1xuXHRpbmplY3RvcjogSW5qZWN0b3I7XG5cdGtleWJvYXJkID0gdHJ1ZTtcblx0cGFuZWxDbGFzczogc3RyaW5nO1xuXHRwb3NpdGlvbjogJ3N0YXJ0JyB8ICdlbmQnIHwgJ3RvcCcgfCAnYm90dG9tJyA9ICdzdGFydCc7XG5cdHNjcm9sbCA9IGZhbHNlO1xuXG5cdHByaXZhdGUgX2FuaW1hdGlvbjogYm9vbGVhbjtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIF9uZ2JDb25maWc6IE5nYkNvbmZpZykge31cblxuXHRnZXQgYW5pbWF0aW9uKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLl9hbmltYXRpb24gPT09IHVuZGVmaW5lZCA/IHRoaXMuX25nYkNvbmZpZy5hbmltYXRpb24gOiB0aGlzLl9hbmltYXRpb247XG5cdH1cblx0c2V0IGFuaW1hdGlvbihhbmltYXRpb246IGJvb2xlYW4pIHtcblx0XHR0aGlzLl9hbmltYXRpb24gPSBhbmltYXRpb247XG5cdH1cbn1cbiJdfQ==